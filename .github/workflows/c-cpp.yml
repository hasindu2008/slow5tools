name: CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master, dev ]

jobs:
  ubuntu_14:
    name: ubuntu_14
    runs-on: ubuntu-18.04
    container: ubuntu:14.04
    steps:
    - name: install git
      run: sudo apt-get install -y software-properties-common && sudo add-apt-repository ppa:git-core/ppa && sudo apt-get update -y && sudo apt-get install git -y
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: sudo apt-get update && sudo apt-get install -y zlib1g-dev libhdf5-dev gcc g++ autoconf automake make
    - name: env
      run: lsb_release -a &&  ldd --version && gcc --version && g++ --version
    - name: build
      run: autoreconf && ./configure && make -j8
    - name: test
      run: make test
  ubuntu_16:
    name: Ubuntu 16
    runs-on: ubuntu-18.04
    container: ubuntu:16.04
    steps:
    - name: install git
      run: apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:git-core/ppa && apt-get update -y && apt-get install git -y
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: apt-get update && apt-get install -y zlib1g-dev libhdf5-dev libzstd1-dev gcc g++ autoconf automake make
    - name: build
      run: autoreconf && ./configure && make -j8
    - name: test
      run: make test
    - name: build zstd
      run: make clean && make -j8 zstd=1
    - name: test zstd
      run: export zstd=1 && make test
  ubuntu_18:
    name: Ubuntu 18 hdf5 install script
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: sudo apt-get update && sudo apt-get install -y zlib1g-dev valgrind libzstd-dev
    - name: build
      run: autoreconf && ./scripts/install-hdf5.sh && ./configure --enable-localhdf5 && make -j8
    - name: test
      run: make test
    - name: test valgrind
      run: ./test/test.sh mem
    - name: build zstd
      run: make clean && make -j8 zstd=1
    - name: test zstd
      run: export zstd=1 && make test
    - name: test valgrind zstd
      run: export zstd=1 && ./test/test.sh mem
  ubuntu_20:
    name: Ubuntu 20
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: sudo apt-get update && sudo apt-get install -y zlib1g-dev libhdf5-dev libzstd-dev
    - name: build-gcc
      run: autoreconf && ./configure && make -j8
    - name: test-gcc
      run: make test
    - name: build-clang zstd
      run: make clean && make CC=clang CXX=clang++ -j8 zstd=1
    - name: test-clang zstd
      run: export zstd=1 && make test
  ubuntu_20_icc:
    name: Ubuntu 20 icc
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Intel Apt repository
      timeout-minutes: 1
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
    - name: install packages
      run: sudo apt-get install -y zlib1g-dev libhdf5-dev libzstd-dev intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
    - name: Setup Intel oneAPI environment
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
    - name: build
      run: autoreconf && ./configure && make CC=icc CXX=icpc -j8
    - name: test
      run: make test
    - name: build zstd
      run: make clean && make CC=icc CXX=icpc -j8 zstd=1
    - name: test zstd
      run: export zstd=1 && make test
  os_x:
    name: OSX
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: brew install hdf5 autoconf automake
    - name: build
      run: autoreconf --install  && ./configure && make -j8
    - name: test
      run: make test
  os_x_zstd:
    name: OSX zstd
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: brew install hdf5 autoconf automake zstd
    - name: build
      run: autoreconf --install  && ./configure && make -j8 zstd=1
    - name: test
      run: export zstd=1 && make test
  # arm64:
  #   name: ubuntu arm
  #   runs-on: ubuntu-latest
  #   steps:
  #   - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
  #   - uses: docker://multiarch/ubuntu-core:arm64-bionic
  #     with:
  #       args: 'uname -a'
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - uses: docker://multiarch/ubuntu-core:arm64-bionic
  #     with:
  #       args: >
  #         bash -c "apt-get update &&
  #         apt-get install -y zlib1g-dev gcc make zlib1g-dev libhdf5-dev g++ autoconf automake &&
  #         ldd --version && gcc --version &&
  #         autoreconf && ./configure && make && make test
  # os_x2:
  #   name: OSX hdf5 hdf5 install script
  #   runs-on: macos-10.15
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #       ssh-key: ${{ secrets.SUBMODULE_CONTENT_PULL_KEY }}
  #   - name: install packages
  #     run: brew install gcc autoconf automake
  #   - name: build
  #     run: autoreconf --install && CC=gcc CXX=g++ CFLAGS="-Wno-implicit-function-declaration" ./scripts/install-hdf5.sh && ./configure --enable-localhdf5 && make -j8
  #   - name: test
  #     run: make test
